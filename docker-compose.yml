volumes:
  postgres_data:
  rabbitmq_data:

networks:
  fastapi_net:
  db_net:

services:
  fastapi:
    image: fastapi:latest
    env_file:
      - .env
    build:
      context: .
      dockerfile: Dockerfile.fastapi
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    volumes:
      - ${PWD}:/app
    depends_on:
      - rabbitmq
      - db
    environment:
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_PORT=${RABBITMQ_PORT}
      - POSTGRES_SERVER=${POSTGRES_SERVER}
      - POSTGRES_PORT=${POSTGRES_PORT}
    networks:
      - fastapi_net
  nginx:
    image: nginx:1.25
    restart: unless-stopped
    depends_on:
      - fastapi
    ports:
      - "8000:80"
    volumes:
      - ./nginx/local/nginx.conf:/etc/nginx/nginx.conf
    networks:
      - fastapi_net
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics -q ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - fastapi_net
  db:
    image: postgres
    env_file:
      - .env
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_DB=${POSTGRES_DB?Variable not set}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - db_net
      - fastapi_net
  celery:
    image: fastapi:latest
    env_file:
      - .env
    depends_on:
      - fastapi
      - rabbitmq
      - db
    environment:
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_PORT=${RABBITMQ_PORT}
    networks:
      - fastapi_net